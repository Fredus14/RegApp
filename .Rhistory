sum(predict!=y[ind])
})
sum(result)/length(y)
# 46
m=1024
k=1
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 47
m=1024
k=3
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 48
m=1024
k=5
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 49
m=1024
k=7
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 50
m=1024
k=9
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 51
m=2048
k=1
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 52
m=2048
k=3
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 53
m=2048
k=5
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 54
m=2048
k=7
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
# 55
m=2048
k=9
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]})
errors
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]}
list(k,m))
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]}
list=c(k,m))
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
})
params[which.min(errors),]
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("bottomleft",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
pvals = rowttests(t(X),factor(y))$p.val
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]
result = sapply(idx,function(ind){
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
})
params[which.min(errors),]
##make a plot and confirm its just one min:
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
k=5;m=2
res <- sapply(seq_along(idx), function(i) {
# loop over each of the 10 cross-validation folds
# predict the held-out samples using k nearest neighbors
ind = idx[[i]]
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:8]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=5)
sum(predict!=y[ind])
})
sum(res)/24
k=5
m=2
res <- sapply(seq_along(idx), function(i) {
# loop over each of the 10 cross-validation folds
# predict the held-out samples using k nearest neighbors
ind = idx[[i]]
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:2]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=5)
sum(predict!=y[ind])
})
sum(res)/24
head(params)
k=1
m=2
res <- sapply(seq_along(idx), function(i) {
# loop over each of the 10 cross-validation folds
# predict the held-out samples using k nearest neighbors
ind = idx[[i]]
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(res)/24
k=1
m=3
res <- sapply(seq_along(idx), function(i) {
# loop over each of the 10 cross-validation folds
# predict the held-out samples using k nearest neighbors
ind = idx[[i]]
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(res)/24
k=9
m=16
res <- sapply(seq_along(idx), function(i) {
# loop over each of the 10 cross-validation folds
# predict the held-out samples using k nearest neighbors
ind = idx[[i]]
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(res)/24
min(errors)
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
ms
y = factor(as.numeric(format( sampleInfo$date, "%m")=="06"))
errors = apply(params,1,function(param){
k =  param[1]
m =  param[2]
result = sapply(idx,function(ind){
pvals = rowttests(t(X[-ind,]),factor(y[-ind]))$p.val
ind2 = order(pvals)[1:m]
predict=knn(X[-ind,ind2],X[ind,ind2],y[-ind],k=k)
sum(predict!=y[ind])
})
sum(result)/length(y)
})
params[which.min(errors),]
##make a plot and confirm its just one min:
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
min(errors)
min(errors)
errors = matrix(errors,5,11)
library(rafalib)
mypar2(1,1)
matplot(ms,t(errors),type="l",log="x")
legend("topright",as.character(ks),lty=seq_along(ks),col=seq_along(ks))
setwd("~/Documents/Online_Courses/Data_Science/9-Developing_Data_Products/ShinyApps")
?runApp
library(shiny)
?runApp
runApp("myReg", display.mode = "showcase")
library(usingR)
library(UsingR)
runApp("myReg", display.mode = "showcase")
?fileInput
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
library(UsingR)
data(father.son)
fit <- lm(sheight~hheight, data=father.son)
fit <- lm(sheight~fheight, data=father.son)
summary(fit)
plot(sheight, fheight, data= father.son)
plot(father.son$sheight, father.son$fheight)
abline(x)
abline(fit)
runApp("myReg", display.mode = "showcase")
cor.prob <- function (X, dfr = nrow(X) - 2) {
R <- cor(X, use="pairwise.complete.obs")
above <- row(R) < col(R)
r2 <- R[above]^2
Fstat <- r2 * dfr/(1 - r2)
R[above] <- 1 - pf(Fstat, 1, dfr)
R[row(R) == col(R)] <- NA
R
}
flattenSquareMatrix <- function(m) {
if( (class(m) != "matrix") | (nrow(m) != ncol(m))) stop("Must be a square matrix.")
if(!identical(rownames(m), colnames(m))) stop("Row and column names must be equal.")
ut <- upper.tri(m)
data.frame(i = rownames(m)[row(m)[ut]],
j = rownames(m)[col(m)[ut]],
cor=t(m)[ut],
p=m[ut])
}
data(mtcars)
cor(mtcars)
cor.prob(mtcars)
flattenSquareMatrix(cor.prob(mtcars))
suppressMessages(require(PerformanceAnalytics))
chart.Correlation(mtcars, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(iris, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(airquality, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(movies, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(father.son, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(faithful, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(ToothGrowth, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
chart.Correlation(ToothGrowth, las = 1,cex.axis = 0.5, mgp = c(0.3, 0.6, 0.3), col = "blue", hist.col="cyan")
runApp("myReg", display.mode = "showcase")
?choices
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
?setdiff
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
runApp("myReg", display.mode = "showcase")
setwd("~/Documents/Online_Courses/Data_Science/9-Developing_Data_Products/ShinyApps/myReg")
runApp()
get(mtcars)
tryCatch(
get("mtcars"),
error = function(e) return(NULL))
get("mtcars")
getData <- get("mtcars")
dataVarNames <- colnames(dataFrame)
dataVarNames <- colnames(getData)
dataVarNames
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Documents/Online_Courses/MITx.15.071x The Analytics Edge/Week2-Linear.Regression/Datasets")
dat <- read.csv("wine.csv")
class(dat)
colnames(dat)
?conditionalPanel
runApp
runApp()
setwd("~/Documents/Online_Courses/Data_Science/9-Developing_Data_Products/ShinyApps/myReg")
runApp()
?break
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?runApp
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
runExammple()
runExample()
runExample("06_tabsets")
runExample("10_download")
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderDataTable
?renderDataTable
shiny::runApp()
shiny::runApp()
?renderPlot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tags
shiny::runApp()
shiny::runApp()
shiny::runApp()
?target
?helpText
?html
shiny::runApp()
shiny::runApp()
setwd("~/Documents/Online_Courses/Data_Science/9-Developing_Data_Products/ShinyApps/RegApp")
shiny::runApp()
library(shinyapps)
shinyapps::setAccountInfo(name='fredus', token='A71749A4E822EBCDCB8891738856C965', secret='ykOfkJnz0Dm1onfJBmWTI7IU8JraqGF6Ie4L4r76')
library(shinyapps)
shinyapps::deployApp()
